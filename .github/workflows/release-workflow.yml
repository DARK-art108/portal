name: Portal CI/CD

on:
  push:
    branches: [hotfix/release-workflow-0.4.0]
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Extract Version
        shell: bash
        run: echo "##[set-output name=version;]$(echo ${GITHUB_REF#refs/heads/hotfix/release-workflow-})"
        id: extract_version

      - name: release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          prerelease: false
          tag_name: v${{ steps.extract_version.outputs.version }}
          release_name: ${{ steps.extract_branch.outputs.branch }}

      - name: save release url
        shell: bash
        run: |
          cat ${{ steps.create_release.outputs.upload_url }} > release.txt
          cat release.txt

      - uses: actions/upload-artifact@v2
        with:
          name: release-url
          path: ./release.txt
          retention-days: 1

  build-out:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1.4.4
        with:
          node-version: 14
          registry-url: https://npm.pkg.github.com/
          scope: "@beesaycheese"

      - name: Installing App dependencies
        working-directory: ./src/app
        run: npm install

      - name: Build and export out
        working-directory: ./src/app
        run: npm run build:static

      - uses: actions/upload-artifact@v2
        with:
          name: app-out
          path: ./portal-build/out
          retention-days: 1

  build-run-n-electron:
    needs: [build-out]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v1
      - name: Set the env variables
        run: |
          echo "USE_HARD_LINKS=false" >> $GITHUB_ENV

      - uses: actions/download-artifact@v2
        with:
          name: app-out
          path: ./portal-build/out

      - uses: actions/download-artifact@v2
        with:
          name: release-url
          path: ./

      - name: Extract Platform
        shell: bash
        run: |
          OS=${{ matrix.os }}
          echo "##[set-output name=platform;]$(echo ${OS%-latest})"
        id: extract_platform

      - name: Extract Version
        shell: bash
        run: echo "##[set-output name=version;]$(echo ${GITHUB_REF#refs/heads/hotfix/release-workflow-})"
        id: extract_version

      - name: Extract release url
        shell: bash
        run: echo "##[set-output name=url;]$(cat ./release.txt)"
        id: release_url

      - name: Extract Executable name
        shell: bash
        run: |
          if [ ${{ steps.extract_platform.outputs.platform }} = "windows" ]; then
          echo "##[set-output name=name;]$(echo Portal Setup ${{ steps.extract_version.outputs.version }}.exe)"
          elif [ ${{ steps.extract_platform.outputs.platform }} = "ubuntu" ]; then
          echo "##[set-output name=name;]$(echo Portal-${{ steps.extract_version.outputs.version }}.zip)"
          else
          echo "##[set-output name=name;]$(echo Portal-${{ steps.extract_version.outputs.version }}.dmg)"
          fi
        id: extract_executable_name

      - name: Extract Executable type
        shell: bash
        run: |
          if [ ${{ steps.extract_platform.outputs.platform }} = "windows" ]; then
          echo "##[set-output name=type;]$(echo exe)"
          elif [ ${{ steps.extract_platform.outputs.platform }} = "ubuntu" ]; then
          echo "##[set-output name=type;]$(echo zip)"
          else
          echo "##[set-output name=type;]$(echo dmg)"
          fi
        id: extract_executable_type

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install Engine dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pylint
          pip install -r ./src/engine/requirements.txt
          python -m pip install --upgrade pyinstaller

      - name: Package Application with pyinstaller
        working-directory: ./src/engine
        run: |
          pyinstaller -F run.py --hidden-import datature-hub --hidden-import engineio.async_drivers.threading  --distpath ../../portal-build/dist

        # Install Node.js
      - uses: actions/setup-node@v1.4.4
        with:
          node-version: 14
          registry-url: https://npm.pkg.github.com/
          scope: "@beesaycheese"

      # Install your dependencies
      - name: Installing Portal dependencies
        working-directory: .
        run: npm install

      - name: Publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: .
        run: |
          npm run dist

      - name: Upload to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_url.outputs.url }}
          asset_path: ./application/${{ steps.extract_executable_name.outputs.name }}
          asset_name: Portal-${{ steps.extract_version.outputs.version }}-${{ steps.extract_platform.outputs.platform }}.${{ steps.extract_executable_type.outputs.type }}
          asset_content_type: application/${{ steps.extract_executable_type.outputs.type }}
